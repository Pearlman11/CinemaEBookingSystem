//edit profile
'use client'
import React, { useState, useEffect, FormEvent } from 'react';
import Link from 'next/link';
import styles from "./editProfile.module.css";
import NavBar from '@/app/components/NavBar/NavBar';
import { useAuth } from '@/app/context/AuthContext';
import { useRouter } from 'next/navigation';


const EditProfile = () => {
  const { user, isAuthenticated, login } = useAuth();
  const router = useRouter();

  // Section toggle states
  const [isPersonalOpen, setIsPersonalOpen] = useState(true);
  const [isPaymentOpen, setIsPaymentOpen] = useState(true);
  
  // Form field states
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [phone, setPhone] = useState('');
  const [email, setEmail] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  const [isPromotionsOptedIn, setIsPromotionsOptedIn] = useState(false);
  

  // Payment cards state
  const [cards, setCards] = useState<PaymentCard[]>([]);
  const [cardNumber,setCardNumber] = useState('');
  const [expDate,setExpDate] = useState('');
  const [billingAddress,setBillingAddress] = useState(' ');
  
  

  // Define the TypeScript interface to match the Java entity
interface PaymentCard {
  id?: number; // Optional since it's generated by the backend
  cardNumber: string;
  billingAddress: string;
  expirationDate: string;
  userId?: number; // This corresponds to the `User` entity relationship
}
  // Pre-fill form with user data when component mounts
  useEffect(() => {
    if (user) {
      setFirstName(user.firstName || '');
      setLastName(user.lastName || '');
      setPhone(user.phone || '');
      setEmail(user.email || '');
      setIsPromotionsOptedIn(user.promotionOptIn);
      const fetchPaymentCards = async () => {
        try {
          console.log('User ID:', user.id); 
          const response = await fetch(`http://localhost:8080/api/users/${user.id}/payment-cards`);
          console.log(response);
          if (!response.ok) {
            throw new Error('Failed to fetch payment cards');
          }
          const cardsData = await response.json();
          setCards(cardsData); 
          console.log('Fetched Cards:', cardsData);
        } catch (error) {
          console.error('Error fetching payment cards:', error);
        }
      };
      fetchPaymentCards();
    }
  }, [user]);

  // Redirect to login if not authenticated
  useEffect(() => {
    if (!isAuthenticated) {
      router.push('/login');
    }
  }, [isAuthenticated, router]);

  // Add this state for validation errors
  const [cardFormErrors, setCardFormErrors] = useState({
    cardNumber: false,
    expDate: false,
    billingAddress: false
  });

  // Add this state to control visibility of the add card form
  const [showAddCardForm, setShowAddCardForm] = useState(false);

  // Update the handleAddCard function
  const handleAddCard = async() => {
    // Reset previous errors
    const errors = {
      cardNumber: !cardNumber.trim(),
      expDate: !expDate.trim(),
      billingAddress: !billingAddress.trim()
    };
    
    setCardFormErrors(errors);
    
    // Check if any fields are empty
    if (errors.cardNumber || errors.expDate || errors.billingAddress) {
      setErrorMessage('Please fill out all card fields');
      return;
    }
    
    if (cards.length >= 4) {
      alert("You can only add up to 4 payment cards.");
      return;
    }
    
    // Clear error message if it was set
    setErrorMessage('');
    
    // Add the card and reset input fields
    setCards([...cards, { cardNumber, billingAddress, expirationDate: expDate }]);
    setCardNumber('');
    setExpDate('');
    setBillingAddress('');
    
    // Hide the add card form after successful addition
    setShowAddCardForm(false);
  };

  // Add a function to cancel adding a card
  const handleCancelAddCard = () => {
    // Reset form fields
    setCardNumber('');
    setExpDate('');
    setBillingAddress('');
    
    // Clear any errors
    setCardFormErrors({
      cardNumber: false,
      expDate: false,
      billingAddress: false
    });
    
    // Hide the form
    setShowAddCardForm(false);
    
    // Clear error message if any
    if (errorMessage) {
      setErrorMessage('');
    }
  };

  // Add this function to handle card removal
  const handleRemoveCard = async (indexToRemove: number) => {
    setCards(cards.filter((_, index) => index !== indexToRemove));
    const cardToRemove = cards[indexToRemove];
    if (!cardToRemove?.id) {
      console.error("Card ID not found");
      return;
    }
    if (!user) throw new Error('User not found');
    const url = `http://localhost:8080/api/users/${user.id}/payment-cards/${cardToRemove.id}`;
    try {
      const response = await fetch(url, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
    });
    if (!response.ok) {
      throw new Error(`Failed to delete card: ${response.statusText}`);
    }
    setCards(prevCards => prevCards.filter((_, index) => index !== indexToRemove));
  } catch (error) {
    console.error("Error removing card:", error);
    }
  }

  // Update the form submission to validate existing cards
  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setErrorMessage('');
    
    // Validate all existing cards
    const invalidCardIndex = cards.findIndex(card => 
      !card.cardNumber.trim() || !card.expirationDate.trim() || !card.billingAddress.trim()
    );
    
    if (invalidCardIndex !== -1) {
      setErrorMessage(`Card #${invalidCardIndex + 1} has incomplete information`);
      setIsSubmitting(false);
      return;
    }
    
    if (newPassword && newPassword !== confirmPassword) {
      setErrorMessage('New passwords do not match');
      setIsSubmitting(false);
      return;
    }

    try {
      if (!user) throw new Error('User not found');

      const updateData = {
        
        firstName,
        lastName,
        email,
        phone,
        password: newPassword || user.password, // Only updating if new password is provided
        role: user.role,
        promotionOptIn:isPromotionsOptedIn,
        paymentCards:cards.map(card =>({
        id:card.id || null,  
        cardNumber: card.cardNumber,
        billingAddress: card.billingAddress,
        expirationDate: card.expirationDate,
        
      })),

      };
      console.log('Update Data:', updateData);

      
      console.log("User ID:", user.id);
      // First API call - Update user profile with original endpoint
      const url = `http://localhost:8080/api/users/${user.id}/editprofile`;
      console.log('Request URL:', url);
      const response = await fetch(`http://localhost:8080/api/users/${user.id}/editprofile`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updateData),
      });
      
      if (!response.ok) {
        throw new Error('Failed to update profile');
      }

      const updatedUser = await response.json();
      
      // Second API call - Send confirmation email
      try {
        const emailResponse = await fetch(`http://localhost:8080/api/auth/update-profile/${user.id}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(updateData),
        });

        if (!emailResponse.ok) {
          console.warn('Confirmation email could not be sent, but profile was updated');
        }
      } catch {
        console.warn('Confirmation email could not be sent, but profile was updated');
      }
      
      // Update auth context with new user data
      login(updatedUser);
      
      // Redirect to profile page
      router.push('/user/profile');
    } catch (error) {
      setErrorMessage(error instanceof Error ? error.message : 'An error occurred');
    } finally {
      setIsSubmitting(false);
    }
    
  }
  
  // Show loading state while checking authentication
  if (!isAuthenticated || !user) {
    return (
      <div>
        <NavBar />
        <div className={styles.editProfileContainer}>
          <p>Loading profile...</p>
        </div>
      </div>
    );
  }

 
  return (
    <div>
      <NavBar />
      <div className={styles.editProfileContainer}>
        <h1>Edit Profile</h1>
        
        {errorMessage && (
          <div className={styles.errorMessage}>{errorMessage}</div>
        )}
        
        <form className={styles.form} onSubmit={handleSubmit}>
          {/* Personal Information Section */}
          <div className={styles.section}>
            <button
              type="button"
              className={styles.sectionHeader}
              onClick={() => setIsPersonalOpen(!isPersonalOpen)}
              aria-expanded={isPersonalOpen}
            >
              <span>Personal Information</span>
              <span className={styles.toggleIcon}>{isPersonalOpen ? "âˆ’" : "+"}</span>
            </button>
            {isPersonalOpen && (
              <div className={styles.sectionContent}>
                <div className={styles.field}>
                  <label htmlFor="firstName">First Name</label>
                  <input
                    type="text"
                    id="firstName"
                    value={firstName}
                    onChange={(e) => setFirstName(e.target.value)}
                    placeholder="Enter your first name"
                    className={styles.input}
                  />
                </div>
                <div className={styles.field}>
                  <label htmlFor="lastName">Last Name</label>
                  <input
                    type="text"
                    id="lastName"
                    value={lastName}
                    onChange={(e) => setLastName(e.target.value)}
                    placeholder="Enter your last name"
                    className={styles.input}
                  />
                </div>
                <div className={styles.field}>
                  <label htmlFor="phone">Phone Number</label>
                  <input
                    type="text"
                    id="phone"
                    value={phone}
                    onChange={(e) => setPhone(e.target.value)}
                    placeholder="Enter your phone number"
                    className={styles.input}
                  />
                </div>
                <div className={styles.field}>
                  <label htmlFor="email">Email Address</label>
                  <input
                    type="email"
                    id="email"
                    value={email}
                    placeholder="Enter your email"
                    className={styles.input}
                    disabled
                  />
                  <small>Email address cannot be changed.</small>
                </div>
              </div>
            )}
          </div>

          {/* Payment Information Section */}
          <div className={styles.section}>
            <button
              type="button"
              className={styles.sectionHeader}
              onClick={() => setIsPaymentOpen(!isPaymentOpen)}
              aria-expanded={isPaymentOpen}
            >
              <span>Payment Information</span>
              <span className={styles.toggleIcon}>{isPaymentOpen ? "âˆ’" : "+"}</span>
            </button>
            {isPaymentOpen && (
              <div className={styles.sectionContent}>
                {cards.length > 0 ? (
                  // Display  payment cards from DB if available
                  cards.map((card, index) => (
                    <div key={index} className={styles.card}>
                      <button 
                        type="button" 
                        className={styles.removeCardButton}
                        onClick={() => handleRemoveCard(index)}
                      >
                        Remove
                      </button>
                      <div className={styles.field}>
                        <label htmlFor={`cardNumber-${index}`}>Card Number</label>
                        <input
                          type="text"
                          id={`cardNumber-${index}`}
                          placeholder="Enter card number"
                          className={styles.input}
                          value={card.cardNumber}
                          onChange={(e) => {
                            const updatedCards = [...cards];
                            updatedCards[index].cardNumber = e.target.value;
                            setCards(updatedCards);
                          }}
                        />
                      </div>
                      <div className={styles.field}>
                        <label htmlFor={`expDate-${index}`}>Expiration Date</label>
                        <input
                          type="text"
                          id={`expDate-${index}`}
                          placeholder="MM/YY"
                          className={styles.input}
                          value={card.expirationDate}
                          onChange={(e) => {const updatedCards = [...cards];
                            updatedCards[index].expirationDate = e.target.value;
                            setCards(updatedCards);
                          }}
                        />
                      </div>
                      <div className={styles.field}>
                        <label htmlFor={`billingAddress-${index}`}>Billing Address</label>
                        <input
                          type="text"
                          id={`billingAddress-${index}`}
                          placeholder="Enter billing address"
                          className={styles.input}
                          value={card.billingAddress}
                          onChange={(e) => {const updatedCards = [...cards];
                            updatedCards[index].billingAddress = e.target.value;
                            setCards(updatedCards);
                          }}
                          required
                        />
                      </div>
                    </div>
                  ))
                ) : (
                  // Display placeholder when no cards are available
                  <div className={styles.placeholderCard}>
                    <div className={styles.placeholderIcon}>ðŸ’³</div>
                    <div className={styles.placeholderText}>
                      No payment cards added yet
                    </div>
                    <div>Add a payment card to simplify your checkout experience</div>
                  </div>
                )}
                
                {/* Button to show the add card form */}
                {!showAddCardForm && (
                  <button 
                    type="button" 
                    onClick={() => setShowAddCardForm(true)} 
                    className={styles.addCardButton}
                  >
                    Add New Card
                  </button>
                )}
                
                {/* Add card form - only shown when showAddCardForm is true */}
                {showAddCardForm && (
                  <div className={styles.addCardForm}>
                    <div className={styles.field}>
                      <label htmlFor="cardNumber">Card Number</label>
                      <input
                        type="text"
                        id="cardNumber"
                        placeholder="Enter card number"
                        className={`${styles.input} ${cardFormErrors.cardNumber ? styles.inputError : ''}`}
                        value={cardNumber}
                        onChange={(e) => {
                          setCardNumber(e.target.value);
                          if (e.target.value.trim() && cardFormErrors.cardNumber) {
                            setCardFormErrors({...cardFormErrors, cardNumber: false});
                          }
                        }}
                      />
                      {cardFormErrors.cardNumber && <div className={styles.errorText}>Card number is required</div>}
                    </div>
                    
                    <div className={styles.field}>
                      <label htmlFor="expDate">Expiration Date</label>
                      <input
                        type="text"
                        id="expDate"
                        placeholder="MM/YY"
                        className={`${styles.input} ${cardFormErrors.expDate ? styles.inputError : ''}`}
                        value={expDate}
                        onChange={(e) => {
                          setExpDate(e.target.value);
                          if (e.target.value.trim() && cardFormErrors.expDate) {
                            setCardFormErrors({...cardFormErrors, expDate: false});
                          }
                        }}
                      />
                      {cardFormErrors.expDate && <div className={styles.errorText}>Expiration date is required</div>}
                    </div>
                    
                    <div className={styles.field}>
                      <label htmlFor="billingAddress">Billing Address</label>
                      <input
                        type="text"
                        id="billingAddress"
                        placeholder="Enter billing address"
                        className={`${styles.input} ${cardFormErrors.billingAddress ? styles.inputError : ''}`}
                        value={billingAddress}
                        onChange={(e) => {
                          setBillingAddress(e.target.value);
                          if (e.target.value.trim() && cardFormErrors.billingAddress) {
                            setCardFormErrors({...cardFormErrors, billingAddress: false});
                          }
                        }}
                      />
                      {cardFormErrors.billingAddress && <div className={styles.errorText}>Billing address is required</div>}
                    </div>
                    
                    <div className={styles.cardFormButtons}>
                      <button type="button" onClick={handleAddCard} className={styles.addCardButton}>
                        Add Card
                      </button>
                      <button type="button" onClick={handleCancelAddCard} className={styles.cancelCardButton}>
                        Cancel
                      </button>
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>

        

        

         
            {/* Promotions Opt-In */}
            <div className={styles.field}>
            <label>Receive Promotions:</label>
            <div className={styles.radioGroup}>
              <label>
                <input
                  type="radio"
                  name="promotions"
                  value="yes"
                  checked={isPromotionsOptedIn === true}
                  onChange={() => setIsPromotionsOptedIn(true)}
                />
                Yes
              </label>
              <label>
                <input
                  type="radio"
                  name="promotions"
                  value="no"
                  checked={isPromotionsOptedIn === false}
                  onChange={() => setIsPromotionsOptedIn(false)}
                />
                No
              </label>
            </div>
          </div>

          <button 
            type="submit" 
            className={styles.saveButton}
            disabled={isSubmitting}
          >
            {isSubmitting ? 'Saving...' : 'Save Changes'}
          </button>
        </form>
        <Link href="/user/profile">
          <button type="button" className={styles.cancelButton}>
            Cancel
          </button>
        </Link>
      </div>
      
    </div>
  );
};

export default EditProfile;